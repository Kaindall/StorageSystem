services:
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,DOCKER://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,DOCKER://kafka:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=DOCKER
      - KAFKA_KRAFT_CLUSTER_ID=LfxF6DB9TjGkl8gSn0UfKg
    volumes:
      - ./kafka:/bitnami/kafka
    networks:
      - queue

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kraft
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9094
    depends_on:
      - kafka
    networks:
      - queue

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.3
    command: start-dev --import-realm
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_PORT: 9091
    ports:
      - 9091:9091
    volumes:
      - ./keycloak/realms.json:/opt/keycloak/data/import/realm-export.json
    networks:
      - security

  sonarqube:
    image: sonarqube:25.9.0.112764-community
    container_name: sonarqube
    ports:
      - "9005:9000"
    depends_on:
      - postgres
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/SONAR
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - sast
    healthcheck:
      test: ["CMD-SHELL", "curl -sSf http://localhost:9000 >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  postgres:
    image: postgres:16
    container_name: db_storage
    environment:
      POSTGRES_DB: STORAGE
      POSTGRES_USER: Kaindall
      POSTGRES_PASSWORD: 123456
    ports:
      - "9000:5432"
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    networks:
      - database
      - sast
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U Kaindall -d STORAGE || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  app-products:
    build:
      context: ./products
    depends_on:
      app-discovery:
        condition: service_started
      postgres:
        condition: service_healthy
    ports:
      - "8000:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/STORAGE
      SPRING_DATASOURCE_USERNAME: Kaindall
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_DATASOURCE_DRIVER-CLASS-NAME: org.postgresql.Driver
      SPRING_JPA_HIBERNATE_DDL-AUTO: create
      SPRING_JPA_SHOW-SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRINGDOC_API-DOCS_PATH: /openapi
      SPRINGDOC_SWAGGER-UI_PATH: /openapi-ui
    networks:
      - backend
      - database
      - queue

  app-orders:
    build:
      context: ./orders
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    ports:
      - "8001:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/STORAGE
      SPRING_DATASOURCE_USERNAME: Kaindall
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_DATASOURCE_DRIVER-CLASS-NAME: org.postgresql.Driver
      SPRING_JPA_HIBERNATE_DDL-AUTO: create
      SPRING_JPA_SHOW-SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
    networks:
      - backend
      - database
      - queue

  app-notifications:
    build:
      context: ./notifications
    depends_on:
      sonarqube:
        condition: service_healthy
      kafka:
        condition: service_started
    ports:
      - "8003:8083"
    networks:
      - backend
      - queue
      - sast

  app-gateway:
    build:
      context: ./gateway
    ports:
      - 8080:8080
    depends_on:
      - keycloak
      - app-discovery
    networks:
      - backend
      - security


  app-discovery:
    build:
      context: ./discovery
    ports:
      - "8070:8070"
    environment:
      SPRING_APPLICATION_NAME: discovery
      EUREKA_INSTANCE_HOSTNAME: localhost
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
      EUREKA_USERNAME: kaindall
      EUREKA_PASSWORD: 123456
    networks:
      - backend

volumes:
  postgresql:
  postgresql_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:

networks:
  backend:
    driver: bridge
  database:
    driver: bridge
  queue:
    driver: bridge
  security:
    driver: bridge
  sast:
    driver: bridge
